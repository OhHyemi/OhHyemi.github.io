<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>csharp on Hyemi&#39;s Blog</title>
    <link>https://ohhyemi.github.io/categories/csharp/</link>
    <description>Recent content in csharp on Hyemi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 17 Dec 2021 23:54:11 +0900</lastBuildDate><atom:link href="https://ohhyemi.github.io/categories/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>static: 정적</title>
      <link>https://ohhyemi.github.io/posts/studying18_static/</link>
      <pubDate>Fri, 17 Dec 2021 23:54:11 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying18_static/</guid>
      <description>static&amp;hellip; 여러곳에 사용을 해봤던 keyword 이지만, 정작 확실하게 아는걸까?
그래서 공부를 해보았다!
static이 뭐야? 🧐  keyword 중 하나로 클래스, 필드, 속성, 메소드 등의 앞에 붙을 수 있다.    특정 개체가 아닌 형식에 속하는 정적 멤버를 선언 할 수 있습니다.   static class에 대해 알아보자! 🧐  class 앞에 static keyword를 사용하여 정의한다. 정적 클래스는 모든 클래스 멤버가 static으로 구성되어있다. non-static 클래스와 다르게 인스턴스가 불가능하다.(new 사용 불가!) 이름 자체로 클래스 멤버에 접근 가능하다.</description>
    </item>
    
    <item>
      <title>HashTable: 해시테이블</title>
      <link>https://ohhyemi.github.io/posts/studying16_hash/</link>
      <pubDate>Wed, 15 Dec 2021 21:14:39 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying16_hash/</guid>
      <description>해시가 뭐야? 🧐  해시(Hash)는 키 값을 해시 함수(Hash function)으로 해싱하여 해시테이블의 특정 위치로 직접 엑세스하도록 만든 방식이다.
 해시테이블이 뭐야? 🧐  해시 테이블은 연관배열 구조를 이용하여 키(key)에 결과 값(value)을 저장하는 자료구조이다.
 연관배열 구조(associative array)란, 키(key) 1개와 값(value) 1개가 1:1로 연관되어 있는 자료구조이다. 따라서 키(key)를 이용하여 값(value)을 도출할 수 있다.
  key 와 value는 일대일 매핑으로 같은 value값을 가질 순 있어도, 같은 key값은 가지지 못한다.
1. 해시테이블(HashTable) 클래스  Non-generic 클래스.</description>
    </item>
    
    <item>
      <title>GarbageCollection: 가비지 컬렉션</title>
      <link>https://ohhyemi.github.io/posts/studying14_gc/</link>
      <pubDate>Tue, 07 Dec 2021 20:21:53 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying14_gc/</guid>
      <description>가비지 컬렉션가 뭐야? 🧐 게임이 실행이 될 때, 메모리를 데이터를 저장하기 위해 사용을 한다. 메모리엔 코드(실행할코드), 데이터(전역변수, 정적변수), 스택메모리(값타입/지역변수)와 힙메모리(사용자동적할당역역/레퍼런스타입)가 있는데, 가비지 컬렉터는 힙메모리를 청소하는 역할이다.
그렇다면 왜 스택메모리를 청소해주는 것은 없을까? 필요없기 때문이다. 스택메모리에 저장되는 데이터들은 스코프를 벗어나면 메모리가 즉시 해제가된다. 이와 반면에 힙메모리는 스코프를 벗어나도 즉시 메모리 해제가 이루어지지않는다. 힙메모리에서 사용하지않는, 불필요한 메모리들을 정리해 다시 사용이 가능하도록 작업하는 것이 바로 가비지 컬렉션이다.
힙 변수생성할 때 무슨 일이 일어날까? 🧐  힙공간에 사용가능한 메모리가 있는지, 변수를 할당할 수 있을 지 확인한다.</description>
    </item>
    
    <item>
      <title>inheritance: 상속</title>
      <link>https://ohhyemi.github.io/posts/studying11_inheritance/</link>
      <pubDate>Mon, 06 Dec 2021 00:25:53 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying11_inheritance/</guid>
      <description>상속이 뭐야? 🧐 상속은 확장의 개념이다. 추상클래스, 일반클래스 모두 상속을 통해 특정 객체의 개념을 확장시킬 수 있다.(인터페이스의 경우 기능확장이라는 말이 좀 더 어울리는 것 같다.) 인터페이스와 추상클래스는 이전 포스트에서 다루었으니 일반클래스를 예시로 들겠다.
💚 예시 오크라는 객체가 있다고 하자. 이 오크라는 객체는 마법사 오크가 될수도, 전사 오크, 궁수 오크 등이 될 수 있다. 이런 오크들을 구현할 때 상속을 사용한다. 직업이 있는 오크 모두 하나의 오크라는 객체를 상속받을 수 있는 것이다. 일반클래스의 상속은 추상클래스나 인터페이스를 상속받는 것과 다르게 부모클래스도 인스턴스할 수 있다.</description>
    </item>
    
    <item>
      <title>abstract class: 추상클래스</title>
      <link>https://ohhyemi.github.io/posts/studying10_abstract/</link>
      <pubDate>Thu, 02 Dec 2021 23:13:57 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying10_abstract/</guid>
      <description>오늘은 추상 클래스에 대해 알아보쟈!
abstract class(추상클래스)가 뭐야? 🧐 인터페이스가 Can Do를 알려주는 역할이라면 추상클래스는 분류(category)를 알려주는 클래스다.
💚 예시 (내가 이해한 방식) 인터페이스에서 이야기했던 예시를 이어가자면, 앵무새와 참새, 펭귄 그리고 슈가 글라이더는 각자 객체를 가질 수 있다. 하지만 앵무새,참새 그리고 펭귄을 포함하는 조류, 슈가 글라이더를 포함하는 포유류라는 것은 객체가 없는, 추상적인 분류(category)의 개념이다. 추상클래스 안에 추상메소드는 인터페이스와 같은 역할이라고 생각하면된다. 즉, &amp;ldquo;이러한 분류(추상클래스)에 속하는 객체들은 이러한(추상메소드)것에 반드시 반응해야한다.&amp;rdquo; 라는 계약이 생긴다.</description>
    </item>
    
    <item>
      <title>interface: 인터페이스</title>
      <link>https://ohhyemi.github.io/posts/studying9_interface/</link>
      <pubDate>Wed, 01 Dec 2021 20:57:53 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying9_interface/</guid>
      <description>interface(인터페이스)가 뭐야? 🧐 나는 인터페이스을 기능들의 묶음이라고 이해했다.
Can Do를 알려주는 역할을 한다.
interface(인터페이스)는 어떤 상황에서 사용해야할까? 🧐 💚 예시 만약 조류라는 클래스가 있다고 하자. 이 클래스를 상속 받는 참새와 앵무새 파생 클래스가 있다. 새는 날 수 있으니까 Fly()를 조류 클래스에 추가를 했다. 하지만 이후에 펭귄과 슈가글라이더를 만들어달라는 요청을 받았다. 하지만 생각해보니 펭귄은 날 수 없는데 슈가글라이더는 조류가 아닌데도 날 수 있지않은가?
이렇게 같은 부모 클래스를 가지고 있지않음에도 수행할 수 있는 기능은 같은 경우(슈가글라이더) 또는 같은 클래스를 상속을 받았지만 그 클래스의 기능이 필요하지 않는 경우가 있다(펭귄).</description>
    </item>
    
    <item>
      <title>Generic: 제너릭 클래스</title>
      <link>https://ohhyemi.github.io/posts/studying3_generic/</link>
      <pubDate>Tue, 23 Nov 2021 23:32:06 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying3_generic/</guid>
      <description>유니티에서 쓸 Tween을 만들고 있는 중이다.Tween에서 여러가지 클래스를 처리하고 싶어서 Generic class를 활용하기로 하였다.
Generic class가 뭐야? 🧐  일반적으로 클래스를 정의할 때, 클래스 내의 모든 데이타 타입을 지정해 주게 된다. 하지만 어떤 경우는 클래스의 거의 모든 부분이 동일한데 일부 데이타 타입만이 다른 경우가 있을 수 있다.이런 경우 C#의 제네릭 타입(Generic Type)을 사용할 수 있는데, 제네릭 타입에서는 int, float, double 같은 데이타 요소 타입을 확정하지 않고 이 데이타 타입 자체를 타입파라미터(Type Parameter)로 받아들이도록 클래스를 정의한다.</description>
    </item>
    
    <item>
      <title>Extenstion Method: 확장 메서드</title>
      <link>https://ohhyemi.github.io/posts/studying2/</link>
      <pubDate>Thu, 18 Nov 2021 01:32:38 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying2/</guid>
      <description>유니티에서 여러가지 연습을 하려고 생각하고 있었을 때, 나만의 tween을 만들어 보고싶다고 생각했다. DoTween을 사용할 때 여러 함수들이 transform, image 등에서 부터 바로 DoTween 함수를 사용할 수 있었던 것이 기억에 남았다.
나도 이런식으로 바로바로 접근할 수 있으면 좋겠다고 생각을 해서 방법을 찾아보니, Extenstion Method를 이용하면 되는 것!
Extenstion Method가 뭐야? 🧐  특수한 종류의 static 메서드. 다른 클래스의 인스턴스 메서드인 것 처럼 사용되는 기능. 클래스, 구조체, 인터페이스 등에 적용 가능.  왜 사용하는거야?</description>
    </item>
    
  </channel>
</rss>
