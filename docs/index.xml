<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hyemi&#39;s Blog</title>
    <link>https://ohhyemi.github.io/</link>
    <description>Recent content on Hyemi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 21 Dec 2021 15:28:48 +0900</lastBuildDate><atom:link href="https://ohhyemi.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>힉의 법칙</title>
      <link>https://ohhyemi.github.io/posts/studying23_ux3/</link>
      <pubDate>Tue, 21 Dec 2021 15:28:48 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying23_ux3/</guid>
      <description>🔎힉의 법칙  의사결정에 걸리는 시간은 선택지의 개수와 복잡성과 비례해 늘어난다.
 🔎인지 부하  인터페이스를 익히고 인터랙션하는 데 필요한 정신적 자원의 양을 인지부하(cognitivve load)라고 한다.
  제품이나 서비스를 처음 접할 때 사용 방법을 익히는 것, 사용하는 것까지 모두 정신적 자원이 소모된다. 프로세스를 익히는 과정과 동시에 처음의 목표를 계속하여 기억해야한다. 익혀야할 정보가 많으면 목표를 잊어버릴 수도 있고 중요한 정보를 잊을 수도 있다. 결과적으로 작업이 더 어려워지는 현상을 낳는다.  💛 인지 부하의 예 💚 복잡한 티비 리모컨 나도 너무 동감하는 예시이다.</description>
    </item>
    
    <item>
      <title>피츠의 법칙</title>
      <link>https://ohhyemi.github.io/posts/sutdying22_ux2/</link>
      <pubDate>Sun, 19 Dec 2021 17:46:38 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/sutdying22_ux2/</guid>
      <description>🔎피츠의 법칙  대상에 도달하는 시간은 대상까지의 거리와 대상의 크기와 함수 관계에 있다.
  터치 대상의 크기는 사용자가 정확하게 선택할 수 있을 정도로 충분히 커야한다. 터치 대상 사이에 충분한 거리를 확보해야 한다. 터치 대상은 인터페이스상에서 쉽게 도달할 수 있는 영역에 배치해야 한다.  💛 피츠의 법칙 적용 사례 💚 폼 텍스트 레이블 (form text label)  폼 텍스트 레이블은 피츠의 법칙을 보여주는 흔한 예다. 디자이너와 개발자가 텍스트 레이블 요소와 입력을 연결해두면 레이블을 탭하거나 클릭해도 입력이 선택된다.</description>
    </item>
    
    <item>
      <title>IEnumerable과 IEnumerator 그리고 foreach</title>
      <link>https://ohhyemi.github.io/posts/studying21_ienumerator_ienumerable/</link>
      <pubDate>Sun, 19 Dec 2021 14:29:54 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying21_ienumerator_ienumerable/</guid>
      <description>✏️ 포스팅 목적 IEmerable, IEnumerator 항상 사용하는 List, Array 같은 Collection 들은 이 인터페이스들을 가지고 있는데, 어떤 것들인지 잘 알지 못하는 것 같아 공부를 해보려 한다!
IEnumerable가 뭐야? 🧐  열거가능한(enumerable) 오브젝트를 위한 IEnumerator를 반환한다. 열거자(enumerator)는 컬렉션의 모든 컨텐츠에 접근하는 간단한 방법을 제공한다.  🍑 IEnumerable
1 2 3 4  public interface IEnumerable { IEnumerator GetEnumerator(); }   IEnumerator가 뭐야? 🧐  iterator   객체 지향적 프로그래밍에서 배열이나 그와 유사한 자료 구조의 내부의 요소를 순회(traversing)하는 객체이다.</description>
    </item>
    
    <item>
      <title>제이콥의 법칙</title>
      <link>https://ohhyemi.github.io/posts/studying20_ux1/</link>
      <pubDate>Sun, 19 Dec 2021 01:11:13 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying20_ux1/</guid>
      <description>✏️ 포스팅 목적 최근에 산 UX/UI의 10가지 심리학 법칙(조 야블로스키 저)라는 책을 읽고 각 법칙에 대해 공부하고 정리하려고 한다.
프로그래머가 UI/UX심리학 법칙을 왜 공부하냐고 의문을 가질 수도 있지만, 내가 목표하는 것은 UI/UX프로그래머이기 때문에! 그리고 프로그래밍에만 한정하고 싶지 않다. 이후에는 디자인까지 해보고싶은&amp;hellip;!!!!
디자인은 디자이너가 하지만 어쨌든 그에 대한 반응을 프로그래머가 구현을 해야하기 또한 구현되는 모든 요소들은 프로그래머가 가장 먼저 테스트하고 가장 많이 경험한다.
디자이너 뿐 아니라 프로그래머가 이러한 지식을 가지고 있다면 좀 더 사용자의 기대에 부흥하는?</description>
    </item>
    
    <item>
      <title>const와 readonly</title>
      <link>https://ohhyemi.github.io/posts/studying19_const_readonly/</link>
      <pubDate>Sat, 18 Dec 2021 16:40:54 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying19_const_readonly/</guid>
      <description>상수가 뭐야? 🧐  상수(常數, constant)란 수식에서 변하지 않는 값을 뜻한다. 이것은 변하는 값 변수와 반대이다.
 종류는 뭐가 있을까? 🧐  const readonly   값 형식: 데이터자체임으로 필드 변경이 불가능 하다. 참조 형식: 데이터에 대한 참조이기 때문에 참조 개체 자체는 변경이 불가능 하지만 개체가 만약 클래스 인스턴스라면 멤버 변수를 바꾸는 것은 가능하다.  💚 예시
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Program { private readonly static Test test = new Test(); static void Main(string[] args) { //개체 참조를 바꾸는 것은 불가능  test = test1;//오류!</description>
    </item>
    
    <item>
      <title>static: 정적</title>
      <link>https://ohhyemi.github.io/posts/studying18_static/</link>
      <pubDate>Fri, 17 Dec 2021 23:54:11 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying18_static/</guid>
      <description>static&amp;hellip; 여러곳에 사용을 해봤던 keyword 이지만, 정작 확실하게 아는걸까?
그래서 공부를 해보았다!
static이 뭐야? 🧐  keyword 중 하나로 클래스, 필드, 속성, 메소드 등의 앞에 붙을 수 있다.    특정 개체가 아닌 형식에 속하는 정적 멤버를 선언 할 수 있습니다.   static class에 대해 알아보자! 🧐  class 앞에 static keyword를 사용하여 정의한다. 정적 클래스는 모든 클래스 멤버가 static으로 구성되어있다. non-static 클래스와 다르게 인스턴스가 불가능하다.(new 사용 불가!) 이름 자체로 클래스 멤버에 접근 가능하다.</description>
    </item>
    
    <item>
      <title>Git(1)</title>
      <link>https://ohhyemi.github.io/posts/studying17_git1/</link>
      <pubDate>Fri, 17 Dec 2021 21:20:43 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying17_git1/</guid>
      <description>git을 이용을 하는데&amp;hellip; 내가 아는 것이라고는 오로지 add-&amp;gt;commit-&amp;gt;push밖에 없어서 좀 더 알아보고자 포스팅을 하기로 했다.
git이 뭐야? 🧐  버전 관리 시스템(VCS) 백업   원격 저장소에 저장해서 어디에서든지 내려받아 작업을 수행할 수 있다. 이전 버전으로 돌아갈 수 있다.   협업   다른 사람이 수정한 내역도 원격 서버에 올라가 있다면 자신의 저장소에도 적용이 가능 commit내역을 통해 누가 무엇을 수정했는지 알 수 있음. branch를 통해 각자 기능을 만들고 이것들을 병합하여 하나의 branch로 만들 수 있음.</description>
    </item>
    
    <item>
      <title>AlgorithmStudy_백준 11727</title>
      <link>https://ohhyemi.github.io/posts/algorithm21_11727/</link>
      <pubDate>Thu, 16 Dec 2021 23:08:56 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/algorithm21_11727/</guid>
      <description>dp문제에 너무 약한 나&amp;hellip; 문제를 작게 쪼개서 푸는 방법을 잘 생각해봐야겠다..
알고리즘 공부 백준 11727 🧐 제로 👉문제 2×n 직사각형을 1×2, 2×1과 2×2 타일로 채우는 방법의 수를 구하는 프로그램을 작성하시오.
아래 그림은 2×17 직사각형을 채운 한가지 예이다.
👉입력 첫째 줄에 n이 주어진다. (1 ≤ n ≤ 1,000)
👉출력 첫째 줄에 2×n 크기의 직사각형을 채우는 방법의 수를 10,007로 나눈 나머지를 출력한다.
🍑풀이
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73  using System; namespace Algorithm21 { class Beakjoon11727 { private static long mod = 10007; static void Main(string[] args) { var n = int.</description>
    </item>
    
    <item>
      <title>HashTable: 해시테이블</title>
      <link>https://ohhyemi.github.io/posts/studying16_hash/</link>
      <pubDate>Wed, 15 Dec 2021 21:14:39 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying16_hash/</guid>
      <description>해시가 뭐야? 🧐  해시(Hash)는 키 값을 해시 함수(Hash function)으로 해싱하여 해시테이블의 특정 위치로 직접 엑세스하도록 만든 방식이다.
 해시테이블이 뭐야? 🧐  해시 테이블은 연관배열 구조를 이용하여 키(key)에 결과 값(value)을 저장하는 자료구조이다.
 연관배열 구조(associative array)란, 키(key) 1개와 값(value) 1개가 1:1로 연관되어 있는 자료구조이다. 따라서 키(key)를 이용하여 값(value)을 도출할 수 있다.
  key 와 value는 일대일 매핑으로 같은 value값을 가질 순 있어도, 같은 key값은 가지지 못한다.
1. 해시테이블(HashTable) 클래스  Non-generic 클래스.</description>
    </item>
    
    <item>
      <title>배너를 만들어보자!</title>
      <link>https://ohhyemi.github.io/posts/studying15_snap/</link>
      <pubDate>Mon, 13 Dec 2021 17:46:19 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying15_snap/</guid>
      <description>아래 이미지는 만든 배너의 모습이다. UI리소스는 친구가 만들어줬다..ㅎㅎ
💚 만들면서 고민한 것들.
 오브젝트 풀을 사용할 것인가?  게임 배너는 보통 오브젝트 풀을 사용할 만큼 갯수가 많지 않다. 그래서 사용하지 않기로 결정! 후에 인벤토리 같은 기능을 만들어 때 사용해보도록 하자!
 자동으로 움직이게 해보자!  한쪽 방향으로 움직이는 배너를 구현하였다. 각 배너마다 유저가 정보를 습득할 수 있는 시간 또한 주었다.
 Snap 기능  유저가 스크롤 뷰를 조작해 해당 배너의 위치를 기준으로 일정부분을 움직였다면, 조작을 끝냈을 때 이전 배너, 다음 배너 또는 원래 배너로 다시 positioning!</description>
    </item>
    
    <item>
      <title>AlgorithmStudy_백준 2667</title>
      <link>https://ohhyemi.github.io/posts/algorithm19_2667/</link>
      <pubDate>Sun, 12 Dec 2021 23:15:57 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/algorithm19_2667/</guid>
      <description>알고리즘 문제는 github에 repository를 만든 후에 포스팅하지않으려고 했는데, 이 문제는 공유해서 올리면 좋을거 같아서 올렸다!! 오랜만에&amp;hellip;ㅎㅎ
알고리즘 공부 백준 2667 🧐 제로 👉문제 &amp;lt;그림 1&amp;gt;과 같이 정사각형 모양의 지도가 있다. 1은 집이 있는 곳을, 0은 집이 없는 곳을 나타낸다. 철수는 이 지도를 가지고 연결된 집의 모임인 단지를 정의하고, 단지에 번호를 붙이려 한다. 여기서 연결되었다는 것은 어떤 집이 좌우, 혹은 아래위로 다른 집이 있는 경우를 말한다. 대각선상에 집이 있는 경우는 연결된 것이 아니다.</description>
    </item>
    
    <item>
      <title>GarbageCollection: 가비지 컬렉션</title>
      <link>https://ohhyemi.github.io/posts/studying14_gc/</link>
      <pubDate>Tue, 07 Dec 2021 20:21:53 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying14_gc/</guid>
      <description>가비지 컬렉션가 뭐야? 🧐 게임이 실행이 될 때, 메모리를 데이터를 저장하기 위해 사용을 한다. 메모리엔 코드(실행할코드), 데이터(전역변수, 정적변수), 스택메모리(값타입/지역변수)와 힙메모리(사용자동적할당역역/레퍼런스타입)가 있는데, 가비지 컬렉터는 힙메모리를 청소하는 역할이다.
그렇다면 왜 스택메모리를 청소해주는 것은 없을까? 필요없기 때문이다. 스택메모리에 저장되는 데이터들은 스코프를 벗어나면 메모리가 즉시 해제가된다. 이와 반면에 힙메모리는 스코프를 벗어나도 즉시 메모리 해제가 이루어지지않는다. 힙메모리에서 사용하지않는, 불필요한 메모리들을 정리해 다시 사용이 가능하도록 작업하는 것이 바로 가비지 컬렉션이다.
힙 변수생성할 때 무슨 일이 일어날까? 🧐  힙공간에 사용가능한 메모리가 있는지, 변수를 할당할 수 있을 지 확인한다.</description>
    </item>
    
    <item>
      <title>타이머를 이용해 스킬아이콘을 만들어보자!</title>
      <link>https://ohhyemi.github.io/posts/studying13_timer/</link>
      <pubDate>Mon, 06 Dec 2021 15:58:16 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying13_timer/</guid>
      <description>🍑 타이머
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  public class Timer : MonoBehaviour { private Coroutine curTimer; public void StartTimer(int time, Action&amp;lt;float&amp;gt; onValueChanged) { //진행되던 타이머가 있다면 멈추고 새로 시작  if (curTimer != null) { StopCoroutine(curTimer); } curTimer = StartCoroutine(CoStartTimer(time, onValueChanged)); } //타이머를 진행할 시간, 시간이 바뀔때마다 어떠한 행동을할건지  IEnumerator CoStartTimer(int time, Action&amp;lt;float&amp;gt; onValueChanged) { float timer = 0; while (true) { //타이머가 지정된 시간을 넘기면 break!</description>
    </item>
    
    <item>
      <title>Tween 만들기 프로젝트 근황</title>
      <link>https://ohhyemi.github.io/posts/studying12_tweenmaking/</link>
      <pubDate>Mon, 06 Dec 2021 15:34:11 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying12_tweenmaking/</guid>
      <description>애니메이션 커브에 대해서 조금 더 알 수 있었던 핑퐁 기능 만들기였다.
🍑 핑퐁 기능 추가!!!!
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  public static Tween SetEase(this Tween tween, AnimationCurve ease, bool pingpong = false) //ping pong: 다시 돌아오는 형태의 애니메이션 { if (!tween.IsPlaying) //트윈이 플레이 중이지 않을 때 수정!</description>
    </item>
    
    <item>
      <title>inheritance: 상속</title>
      <link>https://ohhyemi.github.io/posts/studying11_inheritance/</link>
      <pubDate>Mon, 06 Dec 2021 00:25:53 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying11_inheritance/</guid>
      <description>상속이 뭐야? 🧐 상속은 확장의 개념이다. 추상클래스, 일반클래스 모두 상속을 통해 특정 객체의 개념을 확장시킬 수 있다.(인터페이스의 경우 기능확장이라는 말이 좀 더 어울리는 것 같다.) 인터페이스와 추상클래스는 이전 포스트에서 다루었으니 일반클래스를 예시로 들겠다.
💚 예시 오크라는 객체가 있다고 하자. 이 오크라는 객체는 마법사 오크가 될수도, 전사 오크, 궁수 오크 등이 될 수 있다. 이런 오크들을 구현할 때 상속을 사용한다. 직업이 있는 오크 모두 하나의 오크라는 객체를 상속받을 수 있는 것이다. 일반클래스의 상속은 추상클래스나 인터페이스를 상속받는 것과 다르게 부모클래스도 인스턴스할 수 있다.</description>
    </item>
    
    <item>
      <title>abstract class: 추상클래스</title>
      <link>https://ohhyemi.github.io/posts/studying10_abstract/</link>
      <pubDate>Thu, 02 Dec 2021 23:13:57 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying10_abstract/</guid>
      <description>오늘은 추상 클래스에 대해 알아보쟈!
abstract class(추상클래스)가 뭐야? 🧐 인터페이스가 Can Do를 알려주는 역할이라면 추상클래스는 분류(category)를 알려주는 클래스다.
💚 예시 (내가 이해한 방식) 인터페이스에서 이야기했던 예시를 이어가자면, 앵무새와 참새, 펭귄 그리고 슈가 글라이더는 각자 객체를 가질 수 있다. 하지만 앵무새,참새 그리고 펭귄을 포함하는 조류, 슈가 글라이더를 포함하는 포유류라는 것은 객체가 없는, 추상적인 분류(category)의 개념이다. 추상클래스 안에 추상메소드는 인터페이스와 같은 역할이라고 생각하면된다. 즉, &amp;ldquo;이러한 분류(추상클래스)에 속하는 객체들은 이러한(추상메소드)것에 반드시 반응해야한다.&amp;rdquo; 라는 계약이 생긴다.</description>
    </item>
    
    <item>
      <title>interface: 인터페이스</title>
      <link>https://ohhyemi.github.io/posts/studying9_interface/</link>
      <pubDate>Wed, 01 Dec 2021 20:57:53 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying9_interface/</guid>
      <description>interface(인터페이스)가 뭐야? 🧐 나는 인터페이스을 기능들의 묶음이라고 이해했다.
Can Do를 알려주는 역할을 한다.
interface(인터페이스)는 어떤 상황에서 사용해야할까? 🧐 💚 예시 만약 조류라는 클래스가 있다고 하자. 이 클래스를 상속 받는 참새와 앵무새 파생 클래스가 있다. 새는 날 수 있으니까 Fly()를 조류 클래스에 추가를 했다. 하지만 이후에 펭귄과 슈가글라이더를 만들어달라는 요청을 받았다. 하지만 생각해보니 펭귄은 날 수 없는데 슈가글라이더는 조류가 아닌데도 날 수 있지않은가?
이렇게 같은 부모 클래스를 가지고 있지않음에도 수행할 수 있는 기능은 같은 경우(슈가글라이더) 또는 같은 클래스를 상속을 받았지만 그 클래스의 기능이 필요하지 않는 경우가 있다(펭귄).</description>
    </item>
    
    <item>
      <title>BFS: 너비우선탐색, DFS: 깊이우선탐색(2)</title>
      <link>https://ohhyemi.github.io/posts/studying8_bfs_dfs2/</link>
      <pubDate>Wed, 01 Dec 2021 20:08:00 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying8_bfs_dfs2/</guid>
      <description>음&amp;hellip; ㅋㅋ 면접보고 왔는데 bfs/dfs의 장단점을 물어보셨다. 나는 뭔지만 공부했고 구현해보는 데에만 집중한 나머지 장단점이 뭔지 궁금해하지 않았다는 사실&amp;hellip;!😱 그래서 오늘 공부해보려고 한다.
BFS의 장단점? 🧐  장점   경로가 여러 개인 경우에도 최적해를 보장한다. 최단 경로가 존재한다면 최적해를 찾을 수 있다. 왜?: 한 노드의 자식들을 모두 탐색하기 때문에.  단점   노드의 수가 많아지면 탐색해야하는 노드의 수도 많아진다.  DFS의 장단점? 🧐  장점   최선의 경우 가장 빠름.</description>
    </item>
    
    <item>
      <title>BFS: 너비우선탐색, DFS: 깊이우선탐색(1)</title>
      <link>https://ohhyemi.github.io/posts/studying7_bfs_dfs/</link>
      <pubDate>Mon, 29 Nov 2021 21:40:04 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying7_bfs_dfs/</guid>
      <description>음&amp;hellip; 나는 탐색알고리즘을 매우 어려워 하는 사람이다&amp;hellip;😭😭 이것에 이어서 길찾기를 무서워하는데..😱 프로그래머로서 이런것들은 좀 이겨내야하지 않을까? 라는 생각이 들어서.. 원래 무서운 것은 몰라서 그런거라고 했으니, 나는 이 녀석들을 공부해서 안무서워해야겠다.😋😋😋
Graph(그래프)는 무엇일까? 🧐 BFS, DFS를 알기전에 그래프라는 자료구조를 먼저 알아야한다.
 그래프는 정점(V)과 간선(E)들의 집합이다. 간선은 정점과 정점 사이를 직접 연결하는 선을 말한다. G = (V,E)로 수학적으로 표기한다.  💚 그래프의 표현방법
 인접 행렬  1 2 3 4 5 6 7 8 9  int V; //정점의 갯수 int E; //간선의 갯수  int[,] Graph = new int[V, V]; //N x N 행렬  for (int i = 0; i &amp;lt; E; i++) { Graph[v1,v2] = 1;//방향 그래프 인접행렬로의 표현 }   인접 리스트  1 2 3 4 5 6 7 8 9 10 11 12 13  int V; //정점의 갯수 int E; //간선의 갯수  List&amp;lt;int&amp;gt;[] Graph = new List&amp;lt;int&amp;gt;[V + 1]; for (int i = 1; i &amp;lt; N + 1; i++) { Graph[i] = new List&amp;lt;int&amp;gt;(); foreach(v in AdjacencyVertices) { Graph[i].</description>
    </item>
    
    <item>
      <title>AlgorithmStudy_백준 10773</title>
      <link>https://ohhyemi.github.io/posts/algorithm15_10773/</link>
      <pubDate>Fri, 26 Nov 2021 23:48:46 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/algorithm15_10773/</guid>
      <description>알고리즘 공부 백준 10773 🧐 제로 👉문제 나코더 기장 재민이는 동아리 회식을 준비하기 위해서 장부를 관리하는 중이다.
재현이는 재민이를 도와서 돈을 관리하는 중인데, 애석하게도 항상 정신없는 재현이는 돈을 실수로 잘못 부르는 사고를 치기 일쑤였다.
재현이는 잘못된 수를 부를 때마다 0을 외쳐서, 가장 최근에 재민이가 쓴 수를 지우게 시킨다.
재민이는 이렇게 모든 수를 받아 적은 후 그 수의 합을 알고 싶어 한다. 재민이를 도와주자!
👉입력 첫 번째 줄에 정수 K가 주어진다. (1 ≤ K ≤ 100,000)</description>
    </item>
    
    <item>
      <title>Draw Call: 드로우콜(3)</title>
      <link>https://ohhyemi.github.io/posts/studying6_drawcall3/</link>
      <pubDate>Fri, 26 Nov 2021 22:47:40 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying6_drawcall3/</guid>
      <description>오늘 면접에서 이전에 드로우콜을 공부했던 것과 관련해서 질문을 받았다. 배칭을 깨지 않고 오브젝트의 컬러를 바꿀 수 있는 방법을 말해보라고 하셨다. 하지만 난 모른다고 답했다. 그런 방법이 있나? 배칭을 깨지 않고 컬러를 바꾸는 것은 불가능하다고 생각했다. 그리고 그건 불가능한 게 맞다. 하나의 머티리얼을 공유하는 오브젝트들이 여러 색깔을 낼 수 있는 것은 가능하다는 새로운 사실을 알아서 포스팅 해보려 한다.
MaterialPropertyBlock의 활용 🧐  Create -&amp;gt; Shader -&amp;gt; Standard Surface Shader 생성. [PerRendererData] 를 바꾸기 원하는 셰이더 프로퍼티 앞에 추가.</description>
    </item>
    
    <item>
      <title>AlgorithmStudy_백준 11068</title>
      <link>https://ohhyemi.github.io/posts/algorithm14_11068/</link>
      <pubDate>Fri, 26 Nov 2021 00:18:15 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/algorithm14_11068/</guid>
      <description>알고리즘 공부 백준 11068 🧐 회문인 수 👉문제 어떤 수를 왼쪽부터 읽어도, 오른쪽부터 읽어도 같을 때 이 수를 회문인 수라고 한다. 예를 들어, 747은 회문인 수이다. 255도 회문인 수인데, 16진수로 표현하면 FF이기 때문이다. 양의 정수를 입력받았을 때, 이 수가 어떤 B진법 (2 ≤ B ≤ 64)으로 표현하면 회문이 되는 경우가 있는지 알려주는 프로그램을 작성하시오. B진법이란, 한 자리에서 수를 표현할 때 쓸 수 있는 수의 가짓수가 B라는 뜻이다. 예를 들어, 십진법에서 B는 10이다.</description>
    </item>
    
    <item>
      <title>Draw Call: 드로우콜(2)</title>
      <link>https://ohhyemi.github.io/posts/studying5_drawcall2/</link>
      <pubDate>Thu, 25 Nov 2021 00:05:33 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying5_drawcall2/</guid>
      <description>이전 포스트에서는 드로우콜 자체에 대해 알아보았다면, 이번 포스트에서는 드로우콜을 줄이기 위해 알아야하는 것과 드로우콜을 줄이는 방법에 대해 알아보겠다.
Batch, Batching이 뭐야? 🧐  Batch: 이전 포스트에서 언급했던 DP Call과 render state change들을 합친 넓은 의미의 드로우콜. Batching: 드로우콜을 줄이는 작업(어떠한 조건 아래 다수의 Batch를 하나로 만드는 작업).  💚Batching 세부 설명
Project Setting &amp;gt; Player 에서 사용이 체크가 되어있는지 확인.  Static Batching: Static 플래그가 체크되어있는 정적인 오브젝트에 적용 됨.   적용 방법  버텍스 연산을 런타임에 수행하지 않기때문에 Dynamic Batching 보다 효율적.</description>
    </item>
    
    <item>
      <title>Draw Call: 드로우콜(1)</title>
      <link>https://ohhyemi.github.io/posts/studying4_drawcall1/</link>
      <pubDate>Wed, 24 Nov 2021 23:19:40 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying4_drawcall1/</guid>
      <description>오늘 비대면 면접을 보았는데, 이전 프로젝트에서 드로우콜을 줄이려는 노력을 했냐고 물어보셨다.나는 딱히 드로우콜에 대해서 생각을 해본 적이 별로 없어서 없다고 말했지만, 이 부분에 대해 좀 더 알 필요가 있다고 생각했다. 그래서 오늘의 공부는 드로우콜!
Draw Call이 뭐야? 🧐  간단 요약 정의: CPU가 GPU에 오브젝트를 그리라는 명령을 호출하는 것.  💚세부 설명
 오브젝트가 실제 화면에 렌더링 되려면 CPU -&amp;gt; GPU 정보 전달 필요함. 정보: 메시, 텍스처, 쉐이더, 트랜스폼, 알파블렌딩 여부 등이 존재.</description>
    </item>
    
    <item>
      <title>Generic: 제너릭 클래스</title>
      <link>https://ohhyemi.github.io/posts/studying3_generic/</link>
      <pubDate>Tue, 23 Nov 2021 23:32:06 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying3_generic/</guid>
      <description>유니티에서 쓸 Tween을 만들고 있는 중이다.Tween에서 여러가지 클래스를 처리하고 싶어서 Generic class를 활용하기로 하였다.
Generic class가 뭐야? 🧐  일반적으로 클래스를 정의할 때, 클래스 내의 모든 데이타 타입을 지정해 주게 된다. 하지만 어떤 경우는 클래스의 거의 모든 부분이 동일한데 일부 데이타 타입만이 다른 경우가 있을 수 있다.이런 경우 C#의 제네릭 타입(Generic Type)을 사용할 수 있는데, 제네릭 타입에서는 int, float, double 같은 데이타 요소 타입을 확정하지 않고 이 데이타 타입 자체를 타입파라미터(Type Parameter)로 받아들이도록 클래스를 정의한다.</description>
    </item>
    
    <item>
      <title>AlgorithmStudy_백준 2941</title>
      <link>https://ohhyemi.github.io/posts/algorithm13/</link>
      <pubDate>Tue, 23 Nov 2021 22:12:06 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/algorithm13/</guid>
      <description>알고리즘 공부 백준 2941 🧐 크로아티아 알파벳 👉문제 예전에는 운영체제에서 크로아티아 알파벳을 입력할 수가 없었다. 따라서, 다음과 같이 크로아티아 알파벳을 변경해서 입력했다.
예를 들어, ljes=njak은 크로아티아 알파벳 6개(lj, e, š, nj, a, k)로 이루어져 있다. 단어가 주어졌을 때, 몇 개의 크로아티아 알파벳으로 이루어져 있는지 출력한다.
dž는 무조건 하나의 알파벳으로 쓰이고, d와 ž가 분리된 것으로 보지 않는다. lj와 nj도 마찬가지이다. 위 목록에 없는 알파벳은 한 글자씩 센다.
👉입력 첫째 줄에 최대 100글자의 단어가 주어진다.</description>
    </item>
    
    <item>
      <title>AlgorithmStudy_백준 4673</title>
      <link>https://ohhyemi.github.io/posts/algorithm12/</link>
      <pubDate>Mon, 22 Nov 2021 21:13:41 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/algorithm12/</guid>
      <description>알고리즘 공부 백준 4673 🧐 셀프 넘버 👉문제 셀프 넘버는 1949년 인도 수학자 D.R. Kaprekar가 이름 붙였다. 양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자. 예를 들어, d(75) = 75+7+5 = 87이다.
양의 정수 n이 주어졌을 때, 이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))), &amp;hellip;과 같은 무한 수열을 만들 수 있다.
예를 들어, 33으로 시작한다면 다음 수는 33 + 3 + 3 = 39이고, 그 다음 수는 39 + 3 + 9 = 51, 다음 수는 51 + 5 + 1 = 57이다.</description>
    </item>
    
    <item>
      <title>Extenstion Method: 확장 메서드</title>
      <link>https://ohhyemi.github.io/posts/studying2/</link>
      <pubDate>Thu, 18 Nov 2021 01:32:38 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying2/</guid>
      <description>유니티에서 여러가지 연습을 하려고 생각하고 있었을 때, 나만의 tween을 만들어 보고싶다고 생각했다. DoTween을 사용할 때 여러 함수들이 transform, image 등에서 부터 바로 DoTween 함수를 사용할 수 있었던 것이 기억에 남았다.
나도 이런식으로 바로바로 접근할 수 있으면 좋겠다고 생각을 해서 방법을 찾아보니, Extenstion Method를 이용하면 되는 것!
Extenstion Method가 뭐야? 🧐  특수한 종류의 static 메서드. 다른 클래스의 인스턴스 메서드인 것 처럼 사용되는 기능. 클래스, 구조체, 인터페이스 등에 적용 가능.  왜 사용하는거야?</description>
    </item>
    
    <item>
      <title>AlgorithmStudy_백준 13116</title>
      <link>https://ohhyemi.github.io/posts/algorithm11/</link>
      <pubDate>Wed, 17 Nov 2021 23:11:14 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/algorithm11/</guid>
      <description>알고리즘 공부 백준 13116 🧐 잃어버린 괄호 👉문제 혹시 2007학년도 대학수학능력시험 수리영역 가형 이산수학 30번 문제를 아는가? 여러분은 수능을 치는 수험생의 마음으로 이 문제를 해결해야만 한다.
하지만 우리는 저작권 위반으로 판사님을 뵙고 싶지 않았기 때문에 이 문제를 직접 수록할 수는 없었다. 아래 링크 중 하나를 클릭해서 pdf 파일을 내려받아 가장 마지막 페이지를 보면, 위의 그림과 아주 유사한 문제가 하나 있을 것이다. 여러분은 바로 그 문제를 해결해야만 한다.
이미지 보러가기
문제를 그대로 내면 재미없기 때문에, 우리는 위 그림과 같이 33과 79가 적혀 있던 부분을 하얀색 직사각형으로 가렸다.</description>
    </item>
    
    <item>
      <title>AlgorithmStudy_백준 1541</title>
      <link>https://ohhyemi.github.io/posts/algorithm10/</link>
      <pubDate>Wed, 17 Nov 2021 20:14:27 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/algorithm10/</guid>
      <description>알고리즘 공부 백준 1541 🧐 잃어버린 괄호 👉문제 세준이는 양수와 +, -, 그리고 괄호를 가지고 식을 만들었다. 그리고 나서 세준이는 괄호를 모두 지웠다.
그리고 나서 세준이는 괄호를 적절히 쳐서 이 식의 값을 최소로 만들려고 한다.
괄호를 적절히 쳐서 이 식의 값을 최소로 만드는 프로그램을 작성하시오.
👉입력 첫째 줄에 식이 주어진다. 식은 ‘0’~‘9’, ‘+’, 그리고 ‘-’만으로 이루어져 있고, 가장 처음과 마지막 문자는 숫자이다. 그리고 연속해서 두 개 이상의 연산자가 나타나지 않고, 5자리보다 많이 연속되는 숫자는 없다.</description>
    </item>
    
    <item>
      <title>Studying_복잡도</title>
      <link>https://ohhyemi.github.io/posts/studying1/</link>
      <pubDate>Tue, 16 Nov 2021 02:31:12 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/studying1/</guid>
      <description>시간 복잡도  정의: 특정한 크기의 입력에 대하여 알고리즘이 얼마나 오래 걸리는가. 알고리즘을 위해 필요한 연산의 수로 계산할 수 있음. 빅오(Big-O) 표기법: 함수의 상한을 표기 (ex. $3N^3 + N^2 + 1,000,000$ =&amp;gt; O($N^3$)으로 표기.)  공간 복잡도  정의: 특정한 크기의 입력에 대하여 알고리즘이 얼마나 많은 메모리를 차지하는가. 알고리즘을 위해 필요한 메모리의 양으로 계산할 수 있음. 시간 복잡도와 같이 빅오(Big-O) 표기법을 사용한다.  </description>
    </item>
    
    <item>
      <title>AlgorithmStudy_백준 9461</title>
      <link>https://ohhyemi.github.io/posts/algorithm9/</link>
      <pubDate>Mon, 15 Nov 2021 00:26:56 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/algorithm9/</guid>
      <description>알고리즘 공부 백준 9461 🧐 파도반 수열 👉문제 아래의 그림과 같이 삼각형이 나선 모양으로 놓여져 있다. 첫 삼각형은 정삼각형으로 변의 길이는 1이다. 그 다음에는 다음과 같은 과정으로 정삼각형을 계속 추가한다. 나선에서 가장 긴 변의 길이를 k라 했을 때, 그 변에 길이가 k인 정삼각형을 추가한다.
파도반 수열 P(N)은 나선에 있는 정삼각형의 변의 길이이다. P(1)부터 P(10)까지 첫 10개 숫자는 1, 1, 1, 2, 2, 3, 4, 5, 7, 9이다.
N이 주어졌을 때, P(N)을 구하는 프로그램을 작성하시오.</description>
    </item>
    
    <item>
      <title>Hugo와 MarkDown: Text Color</title>
      <link>https://ohhyemi.github.io/posts/markdown1/</link>
      <pubDate>Sun, 14 Nov 2021 21:31:11 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/markdown1/</guid>
      <description>블로그를 Hugo를 이용해서 만들었는데, 열심히 html 코드로 텍스트에 컬러를 넣었지만 빌드를 하고 보니 텍스에 컬러가 적용이 되어있지않았다!알고 보니.. MarkDown에서는 본래 text color change를 지원하지 않는다.그리고 이것을 html을 이용해서 그 기능을 수행했던 것. 그런데 Hugo자체에서 html을 막아놨던 것!😑😑그냥 사용하는 방법으로는 unsafe를 True로 바꾸면 되지만... (막은데에는 이유가 있을거라고 생각하고...다른 방법을 선택!)그래서 이런 html코드를 수행해주는 새로운 코드들을 적용 시켜줘야하는데 고것이 바로 Shortcode! 참조
Shortcode란 🧐  Shortcodes are simple snippets inside your content files calling built-in or custom templates.</description>
    </item>
    
    <item>
      <title>AlgorithmStudy_백준 1181</title>
      <link>https://ohhyemi.github.io/posts/algorithm8/</link>
      <pubDate>Fri, 12 Nov 2021 23:39:46 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/algorithm8/</guid>
      <description>알고리즘 공부 백준 1181 🧐 단어 정렬 👉문제 알파벳 소문자로 이루어진 N개의 단어가 들어오면 아래와 같은 조건에 따라 정렬하는 프로그램을 작성하시오.
 길이가 짧은 것부터 길이가 같으면 사전 순으로  👉입력 첫째 줄에 단어의 개수 N이 주어진다. (1 ≤ N ≤ 20,000) 둘째 줄부터 N개의 줄에 걸쳐 알파벳 소문자로 이루어진 단어가 한 줄에 하나씩 주어진다. 주어지는 문자열의 길이는 50을 넘지 않는다.
👉출력 조건에 따라 정렬하여 단어들을 출력한다. 단, 같은 단어가 여러 번 입력된 경우에는 한 번씩만 출력한다.</description>
    </item>
    
    <item>
      <title>AlgorithmStudy_백준 1929</title>
      <link>https://ohhyemi.github.io/posts/algorithm7/</link>
      <pubDate>Fri, 12 Nov 2021 23:39:46 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/algorithm7/</guid>
      <description>알고리즘 공부 백준 1929 🧐 소수 구하기 👉문제 M이상 N이하의 소수를 모두 출력하는 프로그램을 작성하시오.
👉입력 첫째 줄에 자연수 M과 N이 빈 칸을 사이에 두고 주어진다. (1 ≤ M ≤ N ≤ 1,000,000) M이상 N이하의 소수가 하나 이상 있는 입력만 주어진다.
👉출력 한 줄에 하나씩, 증가하는 순서대로 소수를 출력한다.
🍑풀이
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54  using System; using System.</description>
    </item>
    
    <item>
      <title>AlgorithmStudy_백준 11866</title>
      <link>https://ohhyemi.github.io/posts/algorithm6/</link>
      <pubDate>Fri, 12 Nov 2021 04:21:22 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/algorithm6/</guid>
      <description>알고리즘 공부 백준 11866 🧐 오세푸스 문제 👉문제 요세푸스 문제는 다음과 같다.
1번부터 N번까지 N명의 사람이 원을 이루면서 앉아있고, 양의 정수 K(≤ N)가 주어진다. 이제 순서대로 K번째 사람을 제거한다. 한 사람이 제거되면 남은 사람들로 이루어진 원을 따라 이 과정을 계속해 나간다. 이 과정은 N명의 사람이 모두 제거될 때까지 계속된다. 원에서 사람들이 제거되는 순서를 (N, K)-요세푸스 순열이라고 한다. 예를 들어 (7, 3)-요세푸스 순열은 &amp;lt;3, 6, 2, 7, 5, 1, 4&amp;gt;이다.
N과 K가 주어지면 (N, K)-요세푸스 순열을 구하는 프로그램을 작성하시오.</description>
    </item>
    
    <item>
      <title>AlgorithmStudy_백준 1920</title>
      <link>https://ohhyemi.github.io/posts/algorithm5/</link>
      <pubDate>Fri, 12 Nov 2021 04:21:22 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/algorithm5/</guid>
      <description>알고리즘 공부 백준 1920 🧐 수 찾기 👉문제 N개의 정수 A[1], A[2], …, A[N]이 주어져 있을 때, 이 안에 X라는 정수가 존재하는지 알아내는 프로그램을 작성하시오.
👉입력 첫째 줄에 자연수 N(1 ≤ N ≤ 100,000)이 주어진다. 다음 줄에는 N개의 정수 A[1], A[2], …, A[N]이 주어진다. 다음 줄에는 M(1 ≤ M ≤ 100,000)이 주어진다. 다음 줄에는 M개의 수들이 주어지는데, 이 수들이 A안에 존재하는지 알아내면 된다. 모든 정수의 범위는 -231 보다 크거나 같고 231보다 작다.</description>
    </item>
    
    <item>
      <title>c#_string_StringBuilder</title>
      <link>https://ohhyemi.github.io/posts/csharp1/</link>
      <pubDate>Fri, 12 Nov 2021 04:21:22 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/csharp1/</guid>
      <description>C# 공부 string/StringBuilder🤔 ✨string  Immutable(불변) 변수. 값이 아닌 참조 변수. 내부적으로 문자열을 관리하는 버퍼를 가지고 있지않다. 대신 이를 참조하고 있다. string마다 새로운 클래스가 생성이 된다.  1 2 3 4  string a = &amp;#34;안녕&amp;#34; + &amp;#34;하세요&amp;#34;; //&amp;#34;안녕&amp;#34; &amp;#34;하세요&amp;#34; -&amp;gt; 각각의 string class 생성. //a string class 생성. //총 3개의 string class가 생성된다. -&amp;gt; 즉 garbage가 많이 생긴다.   ✨StringBuilder  내부적으로 버퍼를 가지고 있다. 조합이 가능하다. 즉, 조합할 때마다 새롭게 class를 생성하지않는다.</description>
    </item>
    
    <item>
      <title>AlgorithmStudy_백준 1439</title>
      <link>https://ohhyemi.github.io/posts/algorithm4/</link>
      <pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/algorithm4/</guid>
      <description>알고리즘 공부 백준 1439 🧐 숫자의 합 👉문제 다솜이는 0과 1로만 이루어진 문자열 S를 가지고 있다. 다솜이는 이 문자열 S에 있는 모든 숫자를 전부 같게 만들려고 한다. 다솜이가 할 수 있는 행동은 S에서 연속된 하나 이상의 숫자를 잡고 모두 뒤집는 것이다. 뒤집는 것은 1을 0으로, 0을 1로 바꾸는 것을 의미한다.
예를 들어 S=0001100 일 때,
 전체를 뒤집으면 1110011이 된다. 4번째 문자부터 5번째 문자까지 뒤집으면 1111111이 되어서 2번 만에 모두 같은 숫자로 만들 수 있다.</description>
    </item>
    
    <item>
      <title>AlgorithmStudy_백준 1712</title>
      <link>https://ohhyemi.github.io/posts/algorithm3/</link>
      <pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/algorithm3/</guid>
      <description>알고리즘 공부 백준 1712 🧐 숫자의 합 👉문제 월드전자는 노트북을 제조하고 판매하는 회사이다. 노트북 판매 대수에 상관없이 매년 임대료, 재산세, 보험료, 급여 등 A만원의 고정 비용이 들며, 한 대의 노트북을 생산하는 데에는 재료비와 인건비 등 총 B만원의 가변 비용이 든다고 한다.
예를 들어 A=1,000, B=70이라고 하자. 이 경우 노트북을 한 대 생산하는 데는 총 1,070만원이 들며, 열 대 생산하는 데는 총 1,700만원이 든다.
노트북 가격이 C만원으로 책정되었다고 한다. 일반적으로 생산 대수를 늘려 가다 보면 어느 순간 총 수입(판매비용)이 총 비용(=고정비용+가변비용)보다 많아지게 된다.</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://ohhyemi.github.io/posts/my-first-post/</link>
      <pubDate>Thu, 11 Nov 2021 05:19:14 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/my-first-post/</guid>
      <description>블로그 처음 만든날..  이제부터 여기에 공부한 거 매일매일 올릴거야 진짜루 매일매일 할꼬야 왜 안고쳐지는거지 ?  1 2 3 4  private void A() { }   </description>
    </item>
    
    <item>
      <title>AlgorithmStudy_백준 11399</title>
      <link>https://ohhyemi.github.io/posts/algorithm2/</link>
      <pubDate>Thu, 11 Nov 2021 04:21:22 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/algorithm2/</guid>
      <description>알고리즘 공부 백준 11399 🧐 ATM 👉문제 인하은행에는 ATM이 1대밖에 없다. 지금 이 ATM앞에 N명의 사람들이 줄을 서있다. 사람은 1번부터 N번까지 번호가 매겨져 있으며, i번 사람이 돈을 인출하는데 걸리는 시간은 Pi분이다.
사람들이 줄을 서는 순서에 따라서, 돈을 인출하는데 필요한 시간의 합이 달라지게 된다. 예를 들어, 총 5명이 있고, P1 = 3, P2 = 1, P3 = 4, P4 = 3, P5 = 2 인 경우를 생각해보자. [1, 2, 3, 4, 5] 순서로 줄을 선다면, 1번 사람은 3분만에 돈을 뽑을 수 있다.</description>
    </item>
    
    <item>
      <title>AlgorithmStudy_백준 11720</title>
      <link>https://ohhyemi.github.io/posts/algorithm1/</link>
      <pubDate>Thu, 11 Nov 2021 04:21:22 +0900</pubDate>
      
      <guid>https://ohhyemi.github.io/posts/algorithm1/</guid>
      <description>알고리즘 공부 백준 11720 🧐 숫자의 합 👉문제 N개의 숫자가 공백 없이 쓰여있다. 이 숫자를 모두 합해서 출력하는 프로그램을 작성하시오.
👉입력 첫째 줄에 숫자의 개수 N (1 ≤ N ≤ 100)이 주어진다. 둘째 줄에 숫자 N개가 공백없이 주어진다.
👉입력 입력으로 주어진 숫자 N개의 합을 출력한다.
🍑풀이
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  using System;	public class Program { public static void Main() {	int count = int.</description>
    </item>
    
    
    
    <item>
      <title>링크</title>
      <link>https://ohhyemi.github.io/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohhyemi.github.io/links/</guid>
      <description>links</description>
    </item>
    
    <item>
      <title>모아보기 🗂️</title>
      <link>https://ohhyemi.github.io/collection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohhyemi.github.io/collection/</guid>
      <description>공부하면서 정리한 것들 모아보기. 📒</description>
    </item>
    
    <item>
      <title>시리즈</title>
      <link>https://ohhyemi.github.io/series-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohhyemi.github.io/series-list/</guid>
      <description>ser·ies</description>
    </item>
    
  </channel>
</rss>
